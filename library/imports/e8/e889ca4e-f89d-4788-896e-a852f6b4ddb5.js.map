{"version":3,"sources":["../../../../../../assets/scripts/tools/encryptjs/assets/scripts/tools/encryptjs/encryptjs.js"],"names":["Zbase64","require","name","definition","exports","module","define","amd","petal","encryptjs","readline","fs","rl","createInterface","input","process","stdin","output","stdout","e","console","log","version","init","Algo","encrypt","plaintext","password","nBits","blockSize","String","utf8Encode","nBytes","pwBytes","Array","i","isNaN","charCodeAt","key","cipher","keyExpansion","concat","slice","counterBlock","nonce","Date","getTime","nonceMs","nonceSec","Math","floor","nonceRnd","random","ctrTxt","fromCharCode","keySchedule","blockCount","ceil","length","ciphertxt","b","c","cipherCntr","blockLength","cipherChar","join","ciphertext","encode","decrypt","decode","nBlocks","ct","plaintxt","plaintxtByte","utf8Decode","getTextEncryptAndSaveToTextFile","filePath","Error","question","answer","cipherText","writeFile","close","getTextEncryptAndSaveToJSONFile","writeCipherTextToJSON","EncryptedText","file","obj","options","callback","spaces","str","JSON","stringify","replacer","err","prototype","unescape","encodeURIComponent","decodeURIComponent","escape"],"mappings":"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","file":"encryptjs.js","sourceRoot":"../../../../../../assets/scripts/tools/encryptjs","sourcesContent":["/*!\r\n * Copyright (c) 2015 Sri Harsha <sri.harsha@zenq.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nvar Zbase64 = require(\"./base64\");\r\n\r\n(function (name, definition) {\r\n    if (typeof exports !== 'undefined' && typeof module !== 'undefined') {\r\n        module.exports = definition();\r\n    } else if (typeof define === 'function' && typeof define.amd === 'object') {\r\n        define(definition);\r\n    } else if (typeof define === 'function' && typeof define.petal === 'object') {\r\n        define(name, [], definition);\r\n    } else {\r\n        this[name] = definition();\r\n    }\r\n})('encryptjs', function (encryptjs) {\r\n\r\n    'use strict';\r\n    var readline = require('readline');\r\n    var fs=require('fs');\r\n    var rl;\r\n    //Electron doesnt support stdin, so dont setup CLI if its not available.\r\n    try {\r\n        rl = readline.createInterface({\r\n            input: process.stdin,\r\n            output: process.stdout\r\n\t\t\t  });\r\n    } catch (e) {\r\n        rl = null;\r\n        console.log('Command line is not supported on this platform', e);\r\n    }\r\n    encryptjs = { version: '1.0.0' };\r\n\r\n    //Right before exporting the validator object, pass each of the builtins\r\n    //through extend() so that their first argument is coerced to a string\r\n    encryptjs.init = function () {\r\n        console.log(\"--------------------Applying Encryption Algorithm------------------ \");\r\n    };\r\n    'use strict';\r\n    if (typeof module!='undefined' && module.exports) var Algo = require('./algo'); // CommonJS (Node.js)\r\n\r\n    encryptjs.encrypt = function(plaintext, password, nBits) {\r\n        var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4)\r\n        if (!(nBits==128 || nBits==192 || nBits==256)) return ''; // standard allows 128/192/256 bit keys\r\n        plaintext = String(plaintext).utf8Encode();\r\n        password = String(password).utf8Encode();\r\n\r\n        // use AES itself to encrypt password to get cipher key (using plain password as source for key\r\n        // expansion) - gives us well encrypted key (though hashed key might be preferred for prod'n use)\r\n        var nBytes = nBits/8;  // no bytes in key (16/24/32)\r\n        var pwBytes = new Array(nBytes);\r\n        for (var i=0; i<nBytes; i++) {  // use 1st 16/24/32 chars of password for key\r\n            pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\r\n        }\r\n        var key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes)); // gives us 16-byte key\r\n        key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\r\n\r\n        // initialise 1st 8 bytes of counter block with nonce (NIST SP800-38A �B.2): [0-1] = millisec,\r\n        // [2-3] = random, [4-7] = seconds, together giving full sub-millisec uniqueness up to Feb 2106\r\n        var counterBlock = new Array(blockSize);\r\n\r\n        var nonce = (new Date()).getTime();  // timestamp: milliseconds since 1-Jan-1970\r\n        var nonceMs = nonce%1000;\r\n        var nonceSec = Math.floor(nonce/1000);\r\n        var nonceRnd = Math.floor(Math.random()*0xffff);\r\n        // for debugging: nonce = nonceMs = nonceSec = nonceRnd = 0;\r\n\r\n        for (var i=0; i<2; i++) counterBlock[i]   = (nonceMs  >>> i*8) & 0xff;\r\n        for (var i=0; i<2; i++) counterBlock[i+2] = (nonceRnd >>> i*8) & 0xff;\r\n        for (var i=0; i<4; i++) counterBlock[i+4] = (nonceSec >>> i*8) & 0xff;\r\n\r\n        // and convert it to a string to go on the front of the ciphertext\r\n        var ctrTxt = '';\r\n        for (var i=0; i<8; i++) ctrTxt += String.fromCharCode(counterBlock[i]);\r\n\r\n        // generate key schedule - an expansion of the key into distinct Key Rounds for each round\r\n        var keySchedule = Algo.keyExpansion(key);\r\n\r\n        var blockCount = Math.ceil(plaintext.length/blockSize);\r\n        var ciphertxt = new Array(blockCount);  // ciphertext as array of strings\r\n\r\n        for (var b=0; b<blockCount; b++) {\r\n            // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n            // done in two stages for 32-bit ops: using two words allows us to go past 2^32 blocks (68GB)\r\n            for (var c=0; c<4; c++) counterBlock[15-c] = (b >>> c*8) & 0xff;\r\n            for (var c=0; c<4; c++) counterBlock[15-c-4] = (b/0x100000000 >>> c*8);\r\n\r\n            var cipherCntr = Algo.cipher(counterBlock, keySchedule);  // -- encrypt counter block --\r\n\r\n            // block size is reduced on final block\r\n            var blockLength = b<blockCount-1 ? blockSize : (plaintext.length-1)%blockSize+1;\r\n            var cipherChar = new Array(blockLength);\r\n\r\n            for (var i=0; i<blockLength; i++) {  // -- xor plaintext with ciphered counter char-by-char --\r\n                cipherChar[i] = cipherCntr[i] ^ plaintext.charCodeAt(b*blockSize+i);\r\n                cipherChar[i] = String.fromCharCode(cipherChar[i]);\r\n            }\r\n            ciphertxt[b] = cipherChar.join('');\r\n        }\r\n\r\n        // use Array.join() for better performance than repeated string appends\r\n        var ciphertext = ctrTxt + ciphertxt.join('');\r\n        ciphertext = Zbase64.encode(ciphertext);\r\n\r\n        return ciphertext;\r\n    };\r\n\r\n    encryptjs.decrypt = function(ciphertext, password, nBits) {\r\n        var blockSize = 16;  // block size fixed at 16 bytes / 128 bits (Nb=4) for AES\r\n        if (!(nBits==128 || nBits==192 || nBits==256)) return ''; // standard allows 128/192/256 bit keys\r\n        ciphertext = Zbase64.decode(String(ciphertext));\r\n        password = String(password).utf8Encode();\r\n\r\n        // use AES to encrypt password (mirroring encrypt routine)\r\n        var nBytes = nBits/8;  // no bytes in key\r\n        var pwBytes = new Array(nBytes);\r\n        for (var i=0; i<nBytes; i++) {\r\n            pwBytes[i] = isNaN(password.charCodeAt(i)) ? 0 : password.charCodeAt(i);\r\n        }\r\n        var key = Algo.cipher(pwBytes, Algo.keyExpansion(pwBytes));\r\n        key = key.concat(key.slice(0, nBytes-16));  // expand key to 16/24/32 bytes long\r\n\r\n        // recover nonce from 1st 8 bytes of ciphertext\r\n        var counterBlock = new Array(8);\r\n        var ctrTxt = ciphertext.slice(0, 8);\r\n        for (var i=0; i<8; i++) counterBlock[i] = ctrTxt.charCodeAt(i);\r\n\r\n        // generate key schedule\r\n        var keySchedule = Algo.keyExpansion(key);\r\n\r\n        // separate ciphertext into blocks (skipping past initial 8 bytes)\r\n        var nBlocks = Math.ceil((ciphertext.length-8) / blockSize);\r\n        var ct = new Array(nBlocks);\r\n        for (var b=0; b<nBlocks; b++) ct[b] = ciphertext.slice(8+b*blockSize, 8+b*blockSize+blockSize);\r\n        ciphertext = ct;  // ciphertext is now array of block-length strings\r\n\r\n        // plaintext will get generated block-by-block into array of block-length strings\r\n        var plaintxt = new Array(ciphertext.length);\r\n\r\n        for (var b=0; b<nBlocks; b++) {\r\n            // set counter (block #) in last 8 bytes of counter block (leaving nonce in 1st 8 bytes)\r\n            for (var c=0; c<4; c++) counterBlock[15-c] = ((b) >>> c*8) & 0xff;\r\n            for (var c=0; c<4; c++) counterBlock[15-c-4] = (((b+1)/0x100000000-1) >>> c*8) & 0xff;\r\n\r\n            var cipherCntr = Algo.cipher(counterBlock, keySchedule);  // encrypt counter block\r\n\r\n            var plaintxtByte = new Array(ciphertext[b].length);\r\n            for (var i=0; i<ciphertext[b].length; i++) {\r\n                // -- xor plaintxt with ciphered counter byte-by-byte --\r\n                plaintxtByte[i] = cipherCntr[i] ^ ciphertext[b].charCodeAt(i);\r\n                plaintxtByte[i] = String.fromCharCode(plaintxtByte[i]);\r\n            }\r\n            plaintxt[b] = plaintxtByte.join('');\r\n        }\r\n\r\n        // join array of blocks into single plaintext string\r\n        var plaintext = plaintxt.join('');\r\n        plaintext = plaintext.utf8Decode();  // decode from UTF8 back to Unicode multi-byte chars\r\n\r\n        return plaintext;\r\n    };\r\n\r\n    encryptjs.getTextEncryptAndSaveToTextFile = function(filePath,password,nBits) {\r\n        if (!rl) throw Error(\"Command line not supported on this platform\");\r\n        rl.question(\"Enter the text to be encrypted: \", function(answer) {\r\n            // TODO: Log the answer in a database\r\n            console.log(\"'\"+answer+\"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\r\n           var cipherText=encryptjs.encrypt(answer,password,nBits);\r\n            fs.writeFile(filePath,cipherText,function(){\r\n                console.log(\"'encrypted.txt' File created in your local directory, if not present refresh your project\");\r\n            });\r\n            rl.close();\r\n        });\r\n    };\r\n\r\n    encryptjs.getTextEncryptAndSaveToJSONFile = function(filePath,password,nBits) {\r\n        if (!rl) throw Error(\"Command line not supported on this platform\");\r\n        rl.question(\"Enter the text to be encrypted: \", function(answer) {\r\n            // TODO: Log the answer in a database\r\n            console.log(\"'\"+answer+\"' This text will be encrypted and stored in a text file 'encrypted.txt'\");\r\n            var cipherText=encryptjs.encrypt(answer,password,nBits);\r\n            encryptjs.writeCipherTextToJSON(filePath,{EncryptedText:cipherText},function(){\r\n                console.log(\"'encryptedText.JSON' File created in your local directory, if not present refresh your project\");\r\n            });\r\n            rl.close();\r\n        });\r\n    };\r\n\r\n    encryptjs.writeCipherTextToJSON=function(file, obj, options, callback) {\r\n        if (callback == null) {\r\n            callback = options;\r\n            options = {}\r\n        }\r\n\r\n        var spaces = typeof options === 'object' && options !== null\r\n            ? 'spaces' in options\r\n            ? options.spaces : this.spaces\r\n            : this.spaces;\r\n\r\n        var str = '';\r\n        try {\r\n            str = JSON.stringify(obj, options ? options.replacer : null, spaces) + '\\n'\r\n        } catch (err) {\r\n            if (callback) return callback(err, null)\r\n        }\r\n\r\n        fs.writeFile(file, str, options, callback)\r\n    };\r\n\r\n    if (typeof String.prototype.utf8Encode == 'undefined') {\r\n        String.prototype.utf8Encode = function() {\r\n            return unescape( encodeURIComponent( this ) );\r\n        };\r\n    }\r\n\r\n    if (typeof String.prototype.utf8Decode == 'undefined') {\r\n        String.prototype.utf8Decode = function() {\r\n            try {\r\n                return decodeURIComponent( escape( this ) );\r\n            } catch (e) {\r\n                return this; // invalid UTF-8? return as-is\r\n            }\r\n        };\r\n    }\r\n\r\n    return encryptjs;\r\n\r\n});\r\n"]}